# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  lint_docker:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1.0-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1.0-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv capstonepjt
            . capstonepjt/bin/activate
            make install
           
      - save_cache:
          paths:
            - ./venv
          key: v1.0-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . capstonepjt/bin/activate
            make lint    

  # building the docker application
  build_docker:
    environment:
      IMAGE_VERSION:  v1.1
      #IMAGE_NAME: arumdev/capstone
   
    docker:
      - image: circleci/golang:1.15
     
    steps:
      - checkout
      - setup_remote_docker

      # build and push Docker image
      - run:
          name: Build Docker Image
          command: |
            docker build --tag=$DOCKER_IMAGE:$IMAGE_VERSION .
      - run:
          name: List Docker Image
          command: |
            docker image ls
      - run:
          name: Push Docker Image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            dockerpath=$DOCKER_IMAGE:$IMAGE_VERSION
            docker push $dockerpath 
  
  
  cluster_deploy:
  
    docker:
      - image: python:3.7.3-stretch
    
    steps:
      - checkout
      - run:
          name: Install awscli
          command: |
            pip3 install awscli
  
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
  
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
           
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
           
      - run:
          name: Create a EKS cluster
          command: |
            aws cloudformation list-exports > cluster.txt
            cat cluster.txt
            if [ $(grep -i "eksctl-udaproject5" cluster.txt | wc -l) -ge 1 ]
              then
              echo "already EKS Cluster exists in environment"
              else
              echo "creating the EKS Cluster"
              eksctl create cluster --name $EKSCLUSTER_NAME --version 1.19 --region $AWS_DEFAULT_REGION --zones us-east-1a,us-east-1b,us-east-1c --nodegroup-name eksudanodegrp --node-type t2.micro --nodes-min 2 --nodes-max 4 --managed
            fi
                      
  
  
            

workflows:
  version:  2.1
  default:
    jobs:
      - lint_docker
      - build_docker:
          requires: [lint_docker]
      - cluster_deploy:
          requires: [build_docker]